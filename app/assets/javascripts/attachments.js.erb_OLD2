$(document).ready(function() {

  var dragSrcRow = null;     // Keep track of the source row
  var selectedRows = null;   // Keep track of selected rows in the source table
  var srcTable = '';  // Global tracking of table being dragged for 'over' class setting
  var rows = [];      // Global rows for #example
  var rows2 = [];     // Global rows for #example2


  var data =  [
    {
      id: "1",
      name_if_folder: "Name if folder 1",
      name: "Name 1",
      note: "Note 1",
      user: "Admin",
      updated_at: '2017/04/25',
      file_size: "123456",
      action: "Akcja"
    },
    {
      id: "2",
      name_if_folder: "Name if folder 2",
      name: "Name 2",
      note: "Note 2",
      user: "Admin",
      updated_at: '2018/04/25',
      file_size: "234567",
      action: "Akcja"
    },
    {
      id: "3",
      name_if_folder: "Name if folder 3",
      name: "Name 3",
      note: "",
      user: "Admin",
      updated_at: '2019/04/25',
      file_size: "345678",
      action: "Akcja"
    },
    {
      id: "4",
      name_if_folder: "Name if folder 4",
      name: "Name 4",
      note: "",
      user: "Admin",
      updated_at: '2020/04/25',
      file_size: "456789",
      action: "Akcja"
    },
    {
      id: "5",
      name_if_folder: "Name if folder 5",
      name: "Name 5",
      note: "Note 5",
      user: "Admin",
      updated_at: '2021/04/25',
      file_size: "567890",
      action: "Akcja"
    },
    {
      id: "6",
      name_if_folder: "Name if folder 6",
      name: "Name 6",
      note: "Note 6",
      user: "Admin",
      updated_at: '2021/04/25',
      file_size: "567890",
      action: "Akcja"
    },
    {
      id: "7",
      name_if_folder: "Name if folder 7",
      name: "Name 7",
      note: "Note",
      user: "Admin",
      updated_at: '2021/07/25',
      file_size: "567890",
      action: "Akcja"
    }
];
  $.fn.dataTable.ext.buttons.attachment_reset_col_vis_and_reorder = {
    text: '<span class="text-primary fa fa-retweet"></span>',
    titleAttr: 'Przywróć domyślne ustawienia column',
    className: 'btn btn-sm btn-default',
    action: function ( e, dt, button, config ) {
      // revert colVis  // dt.columns(config.show).visible(true);
      // 0-check, 1-ID, 2-NAME_IF_FOLDER 
      dt.columns(':gt(3)').visible(true);

      // revert colReorder
      // dziala:        // $($.fn.dataTable.tables(true)).DataTable().colReorder.reset();
      // dziala takze:  // oAttachmentableAttachmentsTable.colReorder.reset();
      // i to równiez:
      dt.colReorder.reset();
    }  
  };

  $.fn.dataTable.ext.buttons.attachment_delete_selected = {
    text: '<span class="text-danger fa fa-trash"></span>',
    titleAttr: 'Usuń zaznaczone wiersze',
    className: 'btn btn-sm btn-default',
    init: function ( dt, node, config ) {
      var that = this;
      dt.on( 'select.dt.DT deselect.dt.DT', function () {
        that.enable( dt.rows( { selected: true } ).any() );
      });
      this.disable();
    },
    action: function ( e, dt, button, config ) {
      if (confirm('Czy na pewno chcesz usunąć zaznaczone wiersze?')) {
        // To jest OK, ale ponizej bardziej uniwersalne
        //$.map(oAttachmentableAttachmentsTable.rows( { selected: true } ).data(), function (item) {
        $.map(dt.rows( { selected: true } ).data(), function (item) {

          $.ajax({
            url: '/attachments/' + item.id,
            type: 'DELETE',
            async: true,
            success: function (response) {
              // oAttachmentableAttachmentsTable.draw();
              // To powyzej jest OK, ale ponizej bardziej uniwersalne
              dt.draw();
              toastr['success'](item.name + '<br>...został trwale usunięty');
            },
            error: function (xhr, ajaxOptions, thrownError) {
              console.log(xhr);
              if (xhr.status == 401) {
                window.location.reload();
              } else {
                getErrorMessage(xhr, thrownError);
              }
            }
          });

        });
      }
    }  
  };

  $.fn.dataTable.ext.buttons.attachment_download_selected = {
    text: '<span class="text-primary fa fa-download"></span>',
    titleAttr: 'Pobierz zaznaczone wiersze jako plik .ZIP',
    className: 'btn btn-sm btn-default',
    init: function ( dt, node, config ) {
      var that = this;
      dt.on( 'select.dt.DT deselect.dt.DT', function () {
        that.enable( dt.rows( { selected: true } ).any() );
      });
      this.disable();
    },
    action: function ( e, dt, button, config ) {
      // $.map(oAttachmentableAttachmentsTable.rows( { selected: true } ).data(), function (item) {
      // To powyzej jest OK, ale ponizej bardziej uniwersalne

      toastr["info"]('Przygotowuję plik .ZIP');
      toastr["success"]('Przygotowuję plik .ZIP');

      var selectedArray = [];
      $.map(dt.rows( { selected: true } ).data(), function (item) {
        selectedArray.push(item.id)
      });

      var data = { attachment_ids: selectedArray };
      window.location = "/attachments/zip_and_download.zip?" + $.param(data) ;

      dt.rows().deselect();

    }  
  };

  $.fn.dataTable.ext.buttons.attachment_move_to_photo = {
    text: '<span class="fa fa-file-export"></span><br><span>Zdjęcia</span>',
    titleAttr: 'Przenieś zaznaczone wiersze do "Zdjęcia"',
    className: 'btn btn-xs btn-default',
    available: function ( dt, config ) {
      return (  $('#attachmenable-attachments').data('move_photo_access') );
    },
    init: function ( dt, node, config ) {
      var that = this;
      dt.on( 'select.dt.DT deselect.dt.DT', function () {
        that.enable( dt.rows( { selected: true } ).any() );
      });
      this.disable();
    },
    action: function ( e, dt, button, config ) {
      if (confirm('Czy na pewno chcesz przenieść plik(-i) do "Zdjęcia"?')) {
        $.map(oAttachmentableAttachmentsTable.rows( { selected: true } ).data(), function (item) {

          $.ajax({
            url: '/attachments/' + item.id + '/move_to_photo',
            type: 'POST',
            async: true,
            success: function (response) {
              oAttachmentableAttachmentsTable.draw();
              toastr['success']('"' + item.attached_file + '" został przeniesiony do "Zdjęcia"');
            },
            error: function (xhr, ajaxOptions, thrownError) {
              console.log(xhr);
              if (xhr.status == 401) {
                window.location.reload();
              } else {
                getErrorMessage(xhr, thrownError);
              }
            }
          });

        });
      };
    }  
  };


  var oAttachmentableAttachmentsTable = $('#attachmenable-attachments').DataTable({
    // dom: 'lBfrtip',
    dom: '<"top" <"row" <"col-sm-9" <"pull-left"l><"pull-left"B> > <"col-sm-3 pull-right"f> > > rt <"bottom"ip><"clear">',
    buttons: [
      'attachment_reset_col_vis_and_reorder',
      {
        extend:    'colvis',
        text:      '<span class="fa fa-columns"></span>',
        titleAttr: 'Pokaż/ukryj kolumny',
        className: 'btn btn-sm btn-default',
        columns:   ':gt(2)' //exclude cols from list
        // postfixButtons: [ 'colvisRestore' ]
      }, 
      'attachment_delete_selected',
      'attachment_download_selected',
      'attachment_move_to_photo'
    ],
    select: {
      // style: 'os',
      style: 'multi',
      selector: 'td:first-child'
    },
//     colReorder: true,
    colReorder: {
      fixedColumnsLeft: 4
    },
// //    rowReorder: true,
//     rowReorder: {
// //      dataSrc: 'id',
// //      selector: 'td:nth-child(2)'
//       selector: 'td:not(:nth-child(1))'
//     },
    responsive: true,
    searchDelay: 500,
    stateSave: true,
    stateDuration: 60 * 60 * 24 * 7,
    // ajax: { 
    //   url: $('#attachmenable-attachments').data('source'),
    //   type: "GET",
    //   data: function(d){
    //     //d.attachment_parent_id = 8501;
    //     if (localStorage.getItem("ls_attachment_breadcrumb") === null) {
    //       d.attachment_parent_id = null
    //     } else {
    //       d.attachment_parent_id = JSON.parse(localStorage.getItem('ls_attachment_breadcrumb')).parent_id;
    //     }
    //   },
    //   error: function (jqXHR, exception) {
    //     console.log(jqXHR);
    //     if (jqXHR.status == 401) {
    //       window.location.reload();
    //     } else {
    //       getErrorMessage(jqXHR, exception);
    //     }
    //   }
    // },
    data: data,
    // pagingType: "full_numbers",
    scrollY: 300,
    paging: false,
    lengthMenu: [[10, 15, 25, 50, 100, -1], [10, 15, 25, 50, 100, "Wszystkie"]],
    iDisplayLength: -1,
    columns: [
      {   
        "data": null, 
        "defaultContent": '',
        "sortable": false,
        "searchable": false,
        "className": 'select-checkbox',
        "orderable": false,
      },
      { "data": "id",
        "visible": false,
        "sortable": false,
        "searchable": false
      },
      { "data": "name_if_folder",
        "visible": false,
        "sortable": false,
        "searchable": false
      },
      { "data": "name" },
      { "data": "note" }, 
      { "data": "user" }, 
      { "data": "updated_at",
        "width": "130px" }, 
      { "data": "file_size",
        "searchable": false,
        "sortable": false,
        "width": "100px" },
      { "data": "action",
        "searchable": false,
        "sortable": false,
        "width": '50px' }
    ],
//    columnDefs: [ { orderable: false, targets: [ 0,1,2 ] } ],
    // Add HTML5 draggable class to each row
    createdRow: function ( row, data, dataIndex, cells ) {
      $(row).attr('id', 'row-' + dataIndex);
      $(row).attr('draggable', 'true');
    },
    drawCallback: function () {
      // Add HTML5 draggable event listeners to each row
      rows = document.querySelectorAll('#attachmenable-attachments tbody tr');
        [].forEach.call(rows, function(row) {
          row.addEventListener('dragstart', handleDragStart, false);
          row.addEventListener('dragenter', handleDragEnter, false)
          row.addEventListener('dragover', handleDragOver, false);
          row.addEventListener('dragleave', handleDragLeave, false);
          row.addEventListener('drop', handleDrop, false);
          row.addEventListener('dragend', handleDragEnd, false);
        });
    },
    preDrawCallback: function( settings ) {
      // jezeli panel nie jest widoczny, to przerwij ładowanie danych
      if ( $( "#tab_attachments" ).is( ":hidden" ) ) {
        return false;
      }
    },
    order: [[ 3, "asc" ]],
    language: {
      url: '<%= asset_path("pl.json.erb") %>'
    },
    stateSaveCallback: function(settings,data) {
      localStorage.setItem( 'DataTables_attachmenable-attachments_/all', JSON.stringify(data) )
    },
    stateLoadCallback: function(settings) {
      return JSON.parse( localStorage.getItem( 'DataTables_attachmenable-attachments_/all' ) )
    }
  });
















function handleDragStart(e) {
  console.log("handleDragStart(e)");
  // this / e.target is the source node.
  
  // Set the source row opacity
  this.style.opacity = '0.4';

  // Keep track globally of the source row and source table id
  dragSrcRow = this;
  srcTable = this.parentNode.parentNode.id

//  console.log('!!!!!!!!!!!! this ):', $('#' + srcTable).DataTable().row(dragSrcRow).data() );

//BJ  $(this).addClass('selected');
//  $(this).style.highlight = true;
//  $(this).addClass('selected');

  $(this).addClass('dragablecolor');

//end BJ

  // Keep track globally of selected rows
  selectedRows = $('#' + srcTable).DataTable().rows( { selected: true } );

  // Allow moves
  e.dataTransfer.effectAllowed = 'move';
  
  // Save the source row html as text
  e.dataTransfer.setData('text/plain', e.target.outerHTML);
  //e.dataTransfer.setData('text/plain', JSON.stringify($('#' + srcTable).DataTable().row(dragSrcRow).data()) );
  //e.dataTransfer.setData('text/plain', JSON.stringify(e.target) );
}
  
function handleDragOver(e) {
  console.log("handleDragOver(e)");
  if (e.preventDefault) {
    e.preventDefault(); // Necessary. Allows us to drop.
  }

  //

  // Allow moves
  e.dataTransfer.dropEffect = 'move'; 

// nie widzę roznicy gdy ustawiam return true;
  return false;
}

function handleDragEnter(e) {
  console.log("handleDragEnter(e)");
  // this / e.target is the current hover target.  
  
  // Get current table id
  var currentTable = this.parentNode.parentNode.id  

  // Don't show drop zone if in source table
//  if (currentTable !== srcTable) {
    this.classList.add('over');

//  }
}

function handleDragLeave(e) {
  console.log("handleDragLeave(e)");
  // this / e.target is previous target element.
 
  console.log("handleDragLeave(e) -> e", e);

  // Remove the drop zone when leaving element
  this.classList.remove('over');  
}
  
function handleDrop(e) {
  console.log("handleDrop(e)");
  // this / e.target is current target element.

  if (e.stopPropagation) {
    e.stopPropagation(); // stops the browser from redirecting.
  }

  // Get destination table id, row
  var dstTable = $(this.closest('table')).attr('id');
  // dstTable  = attachmenable-attachments

  // // No need to process if src and dst table are the same
   if (true) {
  // if (srcTable !== dstTable) {
    
    // If selected rows and dragged item is selected then move selected rows
    if (selectedRows.count() > 0 && $(dragSrcRow).hasClass('selected')) {
      console.log("(selectedRows.count() > 0 && $(dragSrcRow).hasClass('selected')) = true");

      // Add row to destination Datatable
      // Tutaj dodaj do tabeli lub wrzuć do folderu
//      $('#' + dstTable).DataTable().rows.add(selectedRows.data()).draw();

      // Remove row from source Datatable
      $('#' + srcTable).DataTable().rows(selectedRows.indexes()).remove().draw();
      
    } else {  // Otherwise move dragged row
      console.log("(selectedRows.count() > 0 && $(dragSrcRow).hasClass('selected')) = false");

      // Get source transfer data
      var srcData = e.dataTransfer.getData('text/plain');
      // console.log("srcData: ", srcData );
      // console.log("dragSrcRow: ", dragSrcRow );
      // console.log("dstTable: ", dstTable );
      console.log("handleDrop(e) -> e", e);
      console.log("this", this);
      console.log($('#' + dstTable).DataTable().row(this).data());

      // Add row to destination Datatable
      // Tutaj dodaj do tabeli lub wrzuć do folderu
      // $('#' + dstTable).DataTable().row.add($(srcData)).draw();

      // Remove row from source Datatable
      $('#' + srcTable).DataTable().row(dragSrcRow).remove().draw();
    }

  }
e.preventDefault();
  return false;
}

function handleDragEnd(e) {
  console.log("handleDragEnd(e)");
  // this/e.target is the source node.
  
  // Reset the opacity of the source row
  this.style.opacity = '1.0';
  $(this).removeClass('dragablecolor');
//  $(this).removeClass('selected');

  // Clear 'over' class from both tables
  // and reset opacity
  [].forEach.call(rows, function (row) {
    row.classList.remove('over');
    row.style.opacity = '1.0';
  });

}










































  oAttachmentableAttachmentsTable
  .on( 'draw', function () {
    oAttachmentableAttachmentsTable.rows().deselect();
  });






  // Przesuwanie do folderow
  var children = []

  oAttachmentableAttachmentsTable
  .on( 'row-reorder', function ( e, diff, edit ) {
    e.preventDefault();
     console.log( 'normalnie, to ten wiersz jest przenoszony: ' );
     // console.log( edit.triggerRow.data().id );
    children = [];
    // ...ale my dodajemy do tablicy children wszystkie wiersze zaznaczone
    $.map(oAttachmentableAttachmentsTable.rows( { selected: true } ).data(), function (item) {
      children.push(item.id);
    });
  });


  oAttachmentableAttachmentsTable
    .on( 'row-reorder', function ( e, diff, edit ) {
      console.log('edit.triggerRow.data().id:');
         // console.log('edit.triggerRow.data():');
         // console.log(edit.triggerRow.data());
    // for ( var i=0, ien=diff.length ; i<ien ; i++ ) {
    //     console.log( $(diff[i].node) )
    // }

    } );



  oAttachmentableAttachmentsTable
  .on( 'pre-row-reorder', function ( e, node, index ) {
      console.log( ".on( 'pre-row-reorder', function ( e, node, index )" );
      //console.log( 'node:', node );
      //console.log( 'node.index:', node.index );
      //oAttachmentableAttachmentsTable.row(':eq(2)', { page: 'current' }).select();
      //oAttachmentableAttachmentsTable.row(node.index, { page: 'current' }).select();

      //oAttachmentableAttachmentsTable.fnSelect(node);
      //$(this).toggleClass('selected');
  } );
















  // jezeli nastepuje wyswietlenie tab, to zaladuj dane
  $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
    var target = $(e.target).attr("href") // activated tab
    if (target == '#attachments') {
      oAttachmentableAttachmentsTable.draw();
    };
  });


  // column 'action' delete button
  $('#attachmenable-attachments tbody').on( 'click', 'button-as-link', function () {
    if (confirm('Czy na pewno chcesz usunać?')) {
      $.ajax({
        url: $(this).attr('ajax-path'),
        type: $(this).attr('ajax-method'),
        async: true,
        success: function (response) {
          oAttachmentableAttachmentsTable.draw();
          toastr['success']('wiersz został trwale usunięty');
        },
        error: function (xhr, ajaxOptions, thrownError) {
          console.log(xhr);
          if (xhr.status == 401) {
            window.location.reload();
          } else {
            getErrorMessage(xhr, thrownError);
          }
        }
      });
    };
  });


});
