$(document).ready(function() {

  $.fn.dataTable.ext.buttons.attachment_reset_col_vis_and_reorder = {
    text: '<span class="text-primary fa fa-retweet"></span>',
    titleAttr: 'Przywróć domyślne ustawienia column',
    className: 'btn btn-sm btn-default',
    action: function ( e, dt, button, config ) {
      // revert colVis  // dt.columns(config.show).visible(true);
      // 0-check, 1-ID, 2-NAME_IF_FOLDER 
      dt.columns(':gt(3)').visible(true);

      // revert colReorder
      // dziala:        // $($.fn.dataTable.tables(true)).DataTable().colReorder.reset();
      // dziala takze:  // oAttachmentableAttachmentsTable.colReorder.reset();
      // i to równiez:
      dt.colReorder.reset();
    }  
  };

  $.fn.dataTable.ext.buttons.attachment_delete_selected = {
    text: '<span class="text-danger fa fa-trash"></span>',
    titleAttr: 'Usuń zaznaczone wiersze',
    className: 'btn btn-sm btn-default',
    init: function ( dt, node, config ) {
      var that = this;
      dt.on( 'select.dt.DT deselect.dt.DT', function () {
        that.enable( dt.rows( { selected: true } ).any() );
      });
      this.disable();
    },
    action: function ( e, dt, button, config ) {
      if (confirm('Czy na pewno chcesz usunąć zaznaczone wiersze?')) {
        // To jest OK, ale ponizej bardziej uniwersalne
        //$.map(oAttachmentableAttachmentsTable.rows( { selected: true } ).data(), function (item) {
        $.map(dt.rows( { selected: true } ).data(), function (item) {

          $.ajax({
            url: '/attachments/' + item.id,
            type: 'DELETE',
            async: true,
            success: function (response) {
              // oAttachmentableAttachmentsTable.draw();
              // To powyzej jest OK, ale ponizej bardziej uniwersalne
              dt.draw();
              toastr['success'](item.name + '<br>...został trwale usunięty');
            },
            error: function (xhr, ajaxOptions, thrownError) {
              console.log(xhr);
              if (xhr.status == 401) {
                window.location.reload();
              } else {
                getErrorMessage(xhr, thrownError);
              }
            }
          });

        });
      }
    }  
  };

  $.fn.dataTable.ext.buttons.attachment_download_selected = {
    text: '<span class="text-primary fa fa-download"></span>',
    titleAttr: 'Pobierz zaznaczone wiersze jak plik .ZIP',
    className: 'btn btn-sm btn-default',
    init: function ( dt, node, config ) {
      var that = this;
      dt.on( 'select.dt.DT deselect.dt.DT', function () {
        that.enable( dt.rows( { selected: true } ).any() );
      });
      this.disable();
    },
    action: function ( e, dt, button, config ) {
      // $.map(oAttachmentableAttachmentsTable.rows( { selected: true } ).data(), function (item) {
      // To powyzej jest OK, ale ponizej bardziej uniwersalne
      var selectedArray = []
      $.map(dt.rows( { selected: true } ).data(), function (item) {
        selectedArray.push(item.id)
      });

      toastr['info']('przygotowywanie pliku .ZIP');

      var data = { attachment_ids: selectedArray };
      window.location.replace( "/attachments/zip_and_download.zip?" + $.param(data) );

      dt.rows().deselect();

      //window.location.assign("https://www.w3schools.com")
      //window.location = $('#clubs-datatable').data('export_csv_url');

      // $.ajax({
      //   url: '/attachments/zip_and_download',
      //   type: 'GET',
      //   async: true,
      //   data: {
      //     attachment_ids: selectedArray
      //   },
      //   success: function (response) {
      //     toastr['success']('plik został pobrany');
      //     dt.rows().deselect();
      //   },
      //   error: function (xhr, ajaxOptions, thrownError) {
      //     console.log(xhr);
      //     if (xhr.status == 401) {
      //       window.location.reload();
      //     } else {
      //       getErrorMessage(xhr, thrownError);
      //     }
      //   }
      // });


    }  
  };

  $.fn.dataTable.ext.buttons.attachment_move_to_photo = {
    text: '<span class="fa fa-file-export"></span><br><span>Zdjęcia</span>',
    titleAttr: 'Przenieś zaznaczone wiersze do "Zdjęcia"',
    className: 'btn btn-xs btn-default',
    available: function ( dt, config ) {
      return (  $('#attachmenable-attachments').data('move_photo_access') );
    },
    init: function ( dt, node, config ) {
      var that = this;
      dt.on( 'select.dt.DT deselect.dt.DT', function () {
        that.enable( dt.rows( { selected: true } ).any() );
      });
      this.disable();
    },
    action: function ( e, dt, button, config ) {
      if (confirm('Czy na pewno chcesz przenieść plik(-i) do "Zdjęcia"?')) {
        $.map(oAttachmentableAttachmentsTable.rows( { selected: true } ).data(), function (item) {

          $.ajax({
            url: '/attachments/' + item.id + '/move_to_photo',
            type: 'POST',
            async: true,
            success: function (response) {
              oAttachmentableAttachmentsTable.draw();
              toastr['success']('"' + item.attached_file + '" został przeniesiony do "Zdjęcia"');
            },
            error: function (xhr, ajaxOptions, thrownError) {
              console.log(xhr);
              if (xhr.status == 401) {
                window.location.reload();
              } else {
                getErrorMessage(xhr, thrownError);
              }
            }
          });

        });
      };
    }  
  };


  var oAttachmentableAttachmentsTable = $('#attachmenable-attachments').DataTable({
    // dom: 'lBfrtip',
    dom: '<"top" <"row" <"col-sm-9" <"pull-left"l><"pull-left"B> > <"col-sm-3 pull-right"f> > > rt <"bottom"ip><"clear">',
    buttons: [
      'attachment_reset_col_vis_and_reorder',
      {
        extend:    'colvis',
        text:      '<span class="fa fa-columns"></span>',
        titleAttr: 'Pokaż/ukryj kolumny',
        className: 'btn btn-sm btn-default',
        columns:   ':gt(2)' //exclude cols from list
        // postfixButtons: [ 'colvisRestore' ]
      }, 
      'attachment_delete_selected',
      'attachment_download_selected',
      'attachment_move_to_photo'
    ],
    select: {
      style: 'os',
      //style: 'multi',
      selector: 'td:first-child'
    },
//     colReorder: true,
    colReorder: {
      fixedColumnsLeft: 4
    },
// //    rowReorder: true,
//     rowReorder: {
// //      dataSrc: 'id',
// //      selector: 'td:nth-child(2)'
//       selector: 'td:not(:nth-child(1))'
//     },
    responsive: true,
    processing: true,
    serverSide: true,
    deferRender: true,
    searchDelay: 500,
    stateSave: true,
    stateDuration: 60 * 60 * 24 * 7,
    ajax: { 
      url: $('#attachmenable-attachments').data('source'),
      type: "GET",
      data: function(d){
        //d.attachment_parent_id = 8501;
        if (localStorage.getItem("ls_attachment_breadcrumb") === null) {
          d.attachment_parent_id = null
        } else {
          d.attachment_parent_id = JSON.parse(localStorage.getItem('ls_attachment_breadcrumb')).parent_id;
        }
      },
      error: function (jqXHR, exception) {
        console.log(jqXHR);
        if (jqXHR.status == 401) {
          window.location.reload();
        } else {
          getErrorMessage(jqXHR, exception);
        }
      }
    },
    // pagingType: "full_numbers",
    scrollY: 300,
    paging: false,
    lengthMenu: [[10, 15, 25, 50, 100, -1], [10, 15, 25, 50, 100, "Wszystkie"]],
    iDisplayLength: -1,
    columns: [
      {   
        "data": null, 
        "defaultContent": '',
        "sortable": false,
        "searchable": false,
        "className": 'select-checkbox',
        "orderable": false,
      },
      { "data": "id",
        "visible": false,
        "sortable": false,
        "searchable": false
      },
      { "data": "name_if_folder",
        "visible": false,
        "sortable": false,
        "searchable": false
      },
      { "data": "name" },
      { "data": "note" }, 
      { "data": "user" }, 
      { "data": "updated_at",
        "width": "130px" }, 
      { "data": "file_size",
        "searchable": false,
        "sortable": false,
        "width": "100px" },
      { "data": "action",
        "searchable": false,
        "sortable": false,
        "width": '50px' }
    ],
//    columnDefs: [ { orderable: false, targets: [ 0,1,2 ] } ],
    preDrawCallback: function( settings ) {
      // jezeli panel nie jest widoczny, to przerwij ładowanie danych
      if ( $( "#tab_attachments" ).is( ":hidden" ) ) {
        return false;
      }
    },
    order: [[ 3, "asc" ]],
    language: {
      url: '<%= asset_path("pl.json.erb") %>'
    },
    stateSaveCallback: function(settings,data) {
      localStorage.setItem( 'DataTables_attachmenable-attachments_/all', JSON.stringify(data) )
    },
    stateLoadCallback: function(settings) {
      return JSON.parse( localStorage.getItem( 'DataTables_attachmenable-attachments_/all' ) )
    }
  });


  oAttachmentableAttachmentsTable
  .on( 'draw', function () {
    oAttachmentableAttachmentsTable.rows().deselect();
  });






  // Przesuwanie do folderow
  var children = []

  oAttachmentableAttachmentsTable
  .on( 'row-reorder', function ( e, diff, edit ) {
    e.preventDefault();
     // console.log( 'normalnie, to ten wiersz jest przenoszony: ' );
     // console.log( edit.triggerRow.data().id );
    children = [];
    // ...ale my dodajemy do tablicy children wszystkie wiersze zaznaczone
    $.map(oAttachmentableAttachmentsTable.rows( { selected: true } ).data(), function (item) {
      children.push(item.id);
    });
  });


  oAttachmentableAttachmentsTable
    .on( 'row-reorder', function ( e, diff, edit ) {
      // console.log('edit.triggerRow.data().id:');
         // console.log('edit.triggerRow.data():');
         // console.log(edit.triggerRow.data());
    for ( var i=0, ien=diff.length ; i<ien ; i++ ) {
        console.log( $(diff[i].node) )
    }

    } );



  oAttachmentableAttachmentsTable
  .on( 'pre-row-reorder', function ( e, node, index ) {
      //console.log( ".on( 'pre-row-reorder', function ( e, node, index )" );
      //console.log( 'node:', node );
      //console.log( 'node.index:', node.index );
      //oAttachmentableAttachmentsTable.row(':eq(2)', { page: 'current' }).select();
      oAttachmentableAttachmentsTable.row(node.index, { page: 'current' }).select();

      //oAttachmentableAttachmentsTable.fnSelect(node);
      //$(this).toggleClass('selected');
  } );
















  // jezeli nastepuje wyswietlenie tab, to zaladuj dane
  $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
    var target = $(e.target).attr("href") // activated tab
    if (target == '#attachments') {
      oAttachmentableAttachmentsTable.draw();
    };
  });


  // column 'action' delete button
  $('#attachmenable-attachments tbody').on( 'click', 'button-as-link', function () {
    if (confirm('Czy na pewno chcesz usunać?')) {
      $.ajax({
        url: $(this).attr('ajax-path'),
        type: $(this).attr('ajax-method'),
        async: true,
        success: function (response) {
          oAttachmentableAttachmentsTable.draw();
          toastr['success']('wiersz został trwale usunięty');
        },
        error: function (xhr, ajaxOptions, thrownError) {
          console.log(xhr);
          if (xhr.status == 401) {
            window.location.reload();
          } else {
            getErrorMessage(xhr, thrownError);
          }
        }
      });
    };
  });


});
